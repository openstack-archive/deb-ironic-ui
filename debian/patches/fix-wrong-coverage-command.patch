Description: Fix wrong command for /usr/bin/python-coverage
 There's no /usr/bin/coverage in Debian and Ubuntu. The package maintainer of
 python-coverage decided that it was too generic, and that the python-coverage
 shouldn't use just /usr/bin/coverage. So in Debian and Ubuntu, we have to use
 python-coverage, or "python -m coverage". However, "python -m coverage"
 doesn't work with Python 2.6.
 .
 This patch takes all this into account, and offers fallbacks. If
 /usr/bin/coverage exists, we use that. Otherwise, we check for
 /usr/bin/python-coverage. Last, if none of these are available, then we use
 "python -m coverage" as a fallback.
 .
 Note that this is the solution which has been adopted by tuskar-ui, while
 Horizon uses now just "python -m coverage", which I think is less good than
 this patch (though, I correct Horizon before we did the tuskar-ui). So,
 there's alread ya concensus that this problem (eg: the non-availability of
 /usr/bin/coverage) must be addressed, at least to allow distribution package
 maintainers (Debian in my case) to run unit tests.
Author: Thomas Goirand <zigo@debian.org>
Forwarded: https://review.openstack.org/124444
Last-Update: 2014-09-26

--- murano-dashboard-2014.2~b3.orig/run_tests.sh
+++ murano-dashboard-2014.2~b3/run_tests.sh
@@ -76,6 +76,18 @@ makemessages=0
 compilemessages=0
 manage=0
 
+# There's no /usr/bin/coverage in Debian and Ubuntu,
+# though using "python -m coverage" will fail in a
+# python 2.6 venv. Which is why we do what's below,
+# to make sure it works everywhere.
+COVERAGE_CMD=`which coverage || true`
+if [ -z "${COVERAGE_CMD}" ] ; then
+	COVERAGE_CMD=`which python-coverage || true`
+fi
+if [ -z "${COVERAGE_CMD}" ] ; then
+	COVERAGE_CMD="python -m coverage"
+fi
+
 # Jenkins sets a "JOB_NAME" variable, if it's not set, we'll make it "default"
 [ "$JOB_NAME" ] || JOB_NAME="default"
 
@@ -292,8 +304,8 @@ function run_tests_all {
   if [ "$NOSE_WITH_HTML_OUTPUT" = '1' ]; then
     export NOSE_HTML_OUT_FILE='horizon_nose_results.html'
   fi
-  ${command_wrapper} coverage erase
-  ${command_wrapper} coverage run -p $root/manage.py test horizon --settings=horizon.test.settings $testopts
+  ${command_wrapper} ${COVERAGE_CMD} erase
+  ${command_wrapper} ${COVERAGE_CMD} run -p $root/manage.py test horizon --settings=horizon.test.settings $testopts
   # get results of the Horizon tests
   HORIZON_RESULT=$?
 
@@ -302,15 +314,15 @@ function run_tests_all {
   if [ "$NOSE_WITH_HTML_OUTPUT" = '1' ]; then
     export NOSE_HTML_OUT_FILE='dashboard_nose_results.html'
   fi
-  ${command_wrapper} coverage run -p $root/manage.py test openstack_dashboard --settings=openstack_dashboard.test.settings $testopts
+  ${command_wrapper} ${COVERAGE_CMD} run -p $root/manage.py test openstack_dashboard --settings=openstack_dashboard.test.settings $testopts
   # get results of the openstack_dashboard tests
   DASHBOARD_RESULT=$?
 
   if [ $with_coverage -eq 1 ]; then
     echo "Generating coverage reports"
-    ${command_wrapper} coverage combine
-    ${command_wrapper} coverage xml -i --omit='/usr*,setup.py,*egg*,.venv/*'
-    ${command_wrapper} coverage html -i --omit='/usr*,setup.py,*egg*,.venv/*' -d reports
+    ${command_wrapper} ${COVERAGE_CMD} combine
+    ${command_wrapper} ${COVERAGE_CMD} xml -i --omit='/usr*,setup.py,*egg*,.venv/*'
+    ${command_wrapper} ${COVERAGE_CMD} html -i --omit='/usr*,setup.py,*egg*,.venv/*' -d reports
   fi
   # Remove the leftover coverage files from the -p flag earlier.
   rm -f .coverage.*
